1
00:00:00,000 --> 00:00:13,520
Okay. So, hello. Let me introduce us. Like you may have heard, we are from Red Hat, from

2
00:00:13,520 --> 00:00:22,400
Bruno, actually, and we are going to talk about DNF, DNF5, a new generation as we have

3
00:00:22,400 --> 00:00:30,400
in the title. To introduce us and the talk, we have it split into three sections. The

4
00:00:30,400 --> 00:00:37,400
first one is covered by me. It will be a technical overview. Then there is a community history

5
00:00:37,400 --> 00:00:49,800
and action items by Nicola. And finally, a live demo from Jan. First, I would like to

6
00:00:49,800 --> 00:00:55,760
explain what are we actually talking about. I imagine you must have already noticed, but

7
00:00:55,760 --> 00:01:02,640
DNF is a package manager. Probably the easiest way to explain this to someone is to compare

8
00:01:02,640 --> 00:01:09,960
it to, like, an app store or command line app store. So, it installs, upgrades, removes

9
00:01:09,960 --> 00:01:18,880
packages and dependencies, and stuff like that. And there are many examples. You might

10
00:01:18,880 --> 00:01:26,840
be, and we are actually working on DNF and micro-DNF. To put this into some more context,

11
00:01:26,840 --> 00:01:34,960
we have this diagram that's actually describing Fedora. But I think many distributions have

12
00:01:34,960 --> 00:01:42,040
something, some similar setup like this. You can see that it's possible to interact with

13
00:01:42,040 --> 00:01:49,040
the package manager on, like, many ways or in many levels. But here we are talking about

14
00:01:49,040 --> 00:01:58,200
the high-level manager, and that is DNF or LibDNF. If we focus on that section, we could

15
00:01:58,200 --> 00:02:08,440
see a diagram of components that, for the current version, looks something like this.

16
00:02:08,440 --> 00:02:19,240
There are some problems with this, actually. And at first glance, I think it already looks

17
00:02:19,240 --> 00:02:25,640
more complicated than it needs to be. But mainly, you can see that the LibDNF, the library,

18
00:02:25,640 --> 00:02:34,160
is split into two sections. And DNF is actually just using the Hawkeye section, but not the

19
00:02:34,160 --> 00:02:40,080
Libheave one, while micro-DNF is using both. This would be fine if there was some extra

20
00:02:40,080 --> 00:02:45,760
functionality in micro-DNF, but it is actually the other way around. Micro-DNF does less

21
00:02:45,760 --> 00:02:54,760
than DNF, and this is because we have, like, duplicate code there. That's, of course, not

22
00:02:54,760 --> 00:03:03,800
good, so we should fix that. And the other big issues is with the extensions or plugins.

23
00:03:03,800 --> 00:03:09,760
Most of our plugins are for DNF, and they are in Python, but as you can see from the

24
00:03:09,760 --> 00:03:16,000
diagram, it's not possible to use the same extensions in micro-DNF. There's, like, simply

25
00:03:16,000 --> 00:03:20,720
no way how to get to them. And also, the other way around, if you have some extension for

26
00:03:20,720 --> 00:03:28,440
Libheave, it doesn't get used in DNF. This is, again, not good, because we already have

27
00:03:28,440 --> 00:03:32,800
some extensions that we want in both, and we have to duplicate them. Again, like, that's

28
00:03:32,800 --> 00:03:40,920
just a bad situation. And to resolve that, we are introducing or creating DNF5. I should

29
00:03:40,920 --> 00:03:45,600
mention that when I say DNF5 here, I mean, like, this whole part of the stack, so the

30
00:03:45,600 --> 00:03:56,000
library, the plugins, the actual command line DNF tool. But the new diagram looks like this.

31
00:03:56,000 --> 00:04:03,080
It is much simpler. We have merged the insights of the library into one piece, and we have

32
00:04:03,080 --> 00:04:13,000
also merged DNF and micro-DNF into just one tool, which is here called DNF5. There's also

33
00:04:13,000 --> 00:04:22,320
a new DNF demon. We still have to, like, to plug in two nodes here for plugins or extensions,

34
00:04:22,320 --> 00:04:28,760
but it is much more clearly separated. We have, for the library, we have more, like,

35
00:04:28,760 --> 00:04:35,640
a passive extensions that get used automatically. Every time you use the library, they get

36
00:04:35,640 --> 00:04:43,960
loaded and run. And for DNF5, there are some more, like, active plugins. So this is typically,

37
00:04:43,960 --> 00:04:48,120
like, a new command that you can add, and the user actually has to, like, type it and

38
00:04:48,120 --> 00:04:59,320
run it. Okay. Another big two features are that we actually are breaking API, and it's

39
00:04:59,320 --> 00:05:04,600
not backwards-comfortable. So, okay, these are not exactly features, and you might ask,

40
00:05:04,600 --> 00:05:12,920
why are we doing this? So let me try to explain that or justify it. First, for the library,

41
00:05:12,920 --> 00:05:20,120
we completely restructured the API and tried to make it better and most importantly unified

42
00:05:20,120 --> 00:05:27,360
and safer, because before, like I mentioned, it was merged together a bunch of things,

43
00:05:27,360 --> 00:05:33,080
and it wasn't that great. So hopefully, this time, we try to learn from our mistakes and

44
00:05:33,080 --> 00:05:42,760
make it better. And we are, another change we are also doing is inside of the library.

45
00:05:42,760 --> 00:05:50,440
For example, we are now loading and downloading the repositories at the same time. This is

46
00:05:50,440 --> 00:05:55,960
because typically downloading the repositories is network intensive, but loading them on

47
00:05:55,960 --> 00:06:03,560
the other end requires CPU, so they kind of nicely match together and can be done at the

48
00:06:03,560 --> 00:06:11,080
same time. Another change is no, we don't download the file list metadata by default.

49
00:06:11,080 --> 00:06:15,880
If you are not familiar, then the file list metadata contains a list of every file in

50
00:06:15,880 --> 00:06:21,600
all of the RPMs, so it is quite a big file, and we think it's possible to get by without

51
00:06:21,600 --> 00:06:27,880
it as other distributions do, so we don't download it by default, but of course, it's

52
00:06:27,880 --> 00:06:33,400
still possible if the user wants to download it or even configure it, so it's downloaded

53
00:06:33,400 --> 00:06:40,520
every time. Okay, then we are trying to make it, of course, in general faster, and I think

54
00:06:40,520 --> 00:06:51,560
we will see this in the demo later. And, yeah, we have bindings for the new library. We mainly

55
00:06:51,560 --> 00:06:57,320
focus on Python, because that's most of our users, but thanks to Sveak, it should be possible

56
00:06:57,320 --> 00:07:04,960
to generate also for other languages, like Ruby, and it will need some work to do that,

57
00:07:04,960 --> 00:07:13,720
but hopefully it wouldn't be too bad. Now I'm moving to the actual command line package

58
00:07:13,720 --> 00:07:21,280
manager, DNF, DNF5. Probably the biggest change or one of the biggest changes is that

59
00:07:21,280 --> 00:07:27,000
we dropped Python as a dependency, and this is actually what allowed us to merge micro

60
00:07:27,000 --> 00:07:37,720
DNF and DNF together, because before we needed micro DNF for containers on minimal environments

61
00:07:37,720 --> 00:07:43,320
where you need smaller footprints, but since now we don't need Python and everything is

62
00:07:43,320 --> 00:07:55,160
in C++, in C++, we have best of both worlds. Yeah, not everything has changed. Most of

63
00:07:55,160 --> 00:08:00,080
the commands are actually the same, except for a couple of differences that needed, like

64
00:08:00,080 --> 00:08:06,480
picking or fixing, but on the other hand, the outputs of the commands did change. In

65
00:08:06,480 --> 00:08:16,240
fact, we do run still the same CI test that we run for DNF4 as well as for DNF5, and usually

66
00:08:16,240 --> 00:08:22,440
you have to change the checking of the outputs to make it work. Not all of the tests work,

67
00:08:22,440 --> 00:08:29,160
but we are still developing it and working on that. Yeah, then there is the daemon, and

68
00:08:29,160 --> 00:08:36,880
just really quickly, it already is accessible by debas, and since it uses the whole library

69
00:08:36,880 --> 00:08:43,160
or the same library, it will have the same functions, so you can use it to work with

70
00:08:43,160 --> 00:08:50,480
groups or modules and stuff like that. Okay, last thing from me, I want to mention a couple

71
00:08:50,480 --> 00:08:59,280
of additional improvements. I'm not going to match too many details, but we have configurable

72
00:08:59,280 --> 00:09:06,960
aliases, fully integrated modularity, just single configuration for all the users of

73
00:09:06,960 --> 00:09:12,440
the library. We manage to separate system state from history database and module state,

74
00:09:12,440 --> 00:09:19,280
and for example, we have built in autocomplete. There is address, and if you have questions

75
00:09:19,280 --> 00:09:25,880
about this or anything else, you can of course ask us after the presentation. Okay, so that

76
00:09:25,880 --> 00:09:32,720
was everything from me, and let me now hand it over to Nicola and the community part.

77
00:09:32,720 --> 00:09:39,840
Thank you. So after the technical overview, let's focus more on who is actually contributing

78
00:09:39,840 --> 00:09:47,040
to DNF5 and how we are changing our idea of looking at the community, not just our idea

79
00:09:47,040 --> 00:09:53,400
of the code base, how we plan to change our approach with the community. So of course,

80
00:09:53,400 --> 00:09:59,520
DNF5 is an upstream project, so it all starts from upstream, and it was a, I would say quite

81
00:09:59,520 --> 00:10:04,880
a bit chaotic in the past because components were a bit separated, issues were not enabled

82
00:10:04,880 --> 00:10:11,640
for DNF, for example, for quite a while, now they are, but it wasn't super clear the path

83
00:10:11,640 --> 00:10:17,400
we were taking with the community, many issues stayed open for a while, poor requests are

84
00:10:17,400 --> 00:10:25,200
reviewed, we didn't do great, but we plan to change it. So let me give you an overview

85
00:10:25,200 --> 00:10:31,400
of what was the past of DNF contributions, then we will look of what we expect in the

86
00:10:31,400 --> 00:10:38,980
future, and then the action items that the team has to make everything more transparent

87
00:10:38,980 --> 00:10:47,200
and all the workflow much clearer. So first of all, the past of the projects. So I'm saying

88
00:10:47,200 --> 00:10:53,400
projects because here I graphed the weekly contributions by author of DNF, and DNF and

89
00:10:53,400 --> 00:10:59,400
DNF5, and what I want to pull out from this graph is that, well, first of all, now the

90
00:10:59,400 --> 00:11:06,200
effort of the team is all focused on DNF5, as you see, it's just all the contributions

91
00:11:06,200 --> 00:11:14,560
are on the green part, and one other interesting thing is that, yes, DNF5 efforts are higher,

92
00:11:14,560 --> 00:11:22,040
are more, compared to DNF or LibDNF alone, but actually the effort, if you sum, the highest

93
00:11:22,040 --> 00:11:27,720
points of DNF and LibDNF, the efforts of DNF5 is less, and that's because you have

94
00:11:27,720 --> 00:11:37,280
to maintain a unified code base, and that's much, much more easier to do, just one thing.

95
00:11:37,280 --> 00:11:43,480
Also I want to show you during the history of the project how many people actually contributed,

96
00:11:43,480 --> 00:11:51,240
so these are on the Y, the number of people that did some number of contributions on the

97
00:11:51,240 --> 00:11:57,760
X, so there is some exceptional guy, around 200, there is some others, there's just one

98
00:11:57,760 --> 00:12:07,040
guy, 150, 125, and I like, everyone is doing a very small number, so that's fact, and that's

99
00:12:07,040 --> 00:12:12,480
how upstream works, you have exceptional core team members that they will do all the job

100
00:12:12,480 --> 00:12:19,400
and they are carrying, they're pulling the efforts, but it's actually good to maybe improve

101
00:12:19,400 --> 00:12:25,480
the community a bit more, and well to give you maybe some more perspective, you can even

102
00:12:25,480 --> 00:12:33,640
see, like this is, every bar is a contribution, so it's a different person, and yet again

103
00:12:33,640 --> 00:12:40,320
there are just few people that did a huge amount, a huge number of contributions, sorry,

104
00:12:40,320 --> 00:12:47,920
and many, many people that did just a few, like one, which of course are important, but

105
00:12:47,920 --> 00:12:56,960
what it means to us when we, what it means for us having someone from outside contributing,

106
00:12:56,960 --> 00:13:06,480
so I had this idea of kind of splitting the contribution into groups, and here is my analysis,

107
00:13:06,480 --> 00:13:12,240
so there are of course the authors of the project, they are responsible of let's say

108
00:13:12,240 --> 00:13:20,520
the 10% of the total number of commits or contributions, right, and there are one, two, max five maybe

109
00:13:20,520 --> 00:13:27,240
in the project, those are like the key components, they are there from the beginning, I'm talking

110
00:13:27,240 --> 00:13:33,680
generally, but this applies for our components, and there are paid programmers, co-authors,

111
00:13:33,680 --> 00:13:38,480
exceptional contributors that are doing a hundred of commits, a hundred of commits, well

112
00:13:38,480 --> 00:13:43,040
it's quite a number, right, and then of course there are the one-liners, the people that

113
00:13:43,040 --> 00:13:47,200
come and they're like, hey there's a typo here, super important as well, but they are

114
00:13:47,200 --> 00:13:52,920
just, they come and go, you will never see them again, and well they might be not even

115
00:13:52,920 --> 00:14:00,680
interested, sometimes they just come and they are just doing one small fix and going away,

116
00:14:00,680 --> 00:14:06,600
and then there are who I call the people in the middle, so actually the people that can

117
00:14:06,600 --> 00:14:15,280
effectively contribute by following the project and by coming in more than once to just point

118
00:14:15,280 --> 00:14:26,240
out, hey, I am doing this request, maybe I am opening an issue, and then the contributor

119
00:14:26,240 --> 00:14:32,160
get interested in working into the project and does active commit, let's say, so brings

120
00:14:32,160 --> 00:14:37,920
in some code, or maybe deletes some code, deleting code is very important.

121
00:14:37,920 --> 00:14:43,280
So let's look at how we perceive contributions from inside a team.

122
00:14:43,280 --> 00:14:51,160
So for DNF, talking still about weekly contributors, we had a total of 225 contributors for authors,

123
00:14:51,160 --> 00:14:58,800
so four people that did more than 10% of the whole work, and 19 people, very good people

124
00:14:58,800 --> 00:15:07,000
that did 100 commits, and those people, they are regular, they are since forever, you kind

125
00:15:07,000 --> 00:15:11,400
of know that they are there helping you out, but let's focus on the others.

126
00:15:11,400 --> 00:15:17,320
So how many commits are in total, and how many have been without those people, and the number

127
00:15:17,320 --> 00:15:23,720
is actually roughly 10,000 total commits, oh, sorry, I am talking about contributions,

128
00:15:23,720 --> 00:15:30,240
so it's a little bit, so it's smaller numbers, but still, like the statistic applies.

129
00:15:30,240 --> 00:15:35,080
Roughly 4,000 commits without the authors, and roughly 1,000.

130
00:15:35,080 --> 00:15:42,000
So 1,000 commits are done just by those people that stay in the middle, more or less.

131
00:15:42,000 --> 00:15:49,600
And so what is your effort to be, let's say, active member of the community, so I said,

132
00:15:49,600 --> 00:15:56,160
okay, I want to do the 1% of this, that's pretty easy, you do roughly one, sorry, 11

133
00:15:56,160 --> 00:16:04,360
commits, 11 issues, 11 whatever, 11 comments, and you are actually 1%.

134
00:16:04,360 --> 00:16:11,920
If you know 100 people, you definitely remember if one person is missing or not, or like,

135
00:16:11,920 --> 00:16:17,160
hey, you, I don't know, you change your haircut to pink, and you remember because the 1% is

136
00:16:17,160 --> 00:16:22,720
quite a lot, so it's very easy, and I'm talking about 11 contributions in all the history

137
00:16:22,720 --> 00:16:28,840
of DNF, and DNF is being active for like 10 years, so it's like one contribution per

138
00:16:28,840 --> 00:16:29,840
year.

139
00:16:29,840 --> 00:16:31,520
It's quite easy, right?

140
00:16:31,520 --> 00:16:36,840
And now it's the time to jump into DNF 5, because if you look to DNF 5, same applies,

141
00:16:36,840 --> 00:16:42,960
it's basically just team effort, so 5 authors roughly, this number will decrease with time,

142
00:16:42,960 --> 00:16:48,600
and 6 very good contributors, and then those are the number of contributions, and again,

143
00:16:48,600 --> 00:16:55,400
if you do 1 to contributors, we value that kind of contribution, whatever it is, quite

144
00:16:55,400 --> 00:16:59,520
a lot, I mean, it's significant, this is what I'm trying to bring up.

145
00:16:59,520 --> 00:17:02,600
So what kind of contributions are we talking about?

146
00:17:02,600 --> 00:17:07,600
We have a transparent workflow, we have open issues now, we triage all the issues weekly,

147
00:17:07,600 --> 00:17:13,920
this is something that again, we were not doing for DNF for some time, we have public

148
00:17:13,920 --> 00:17:21,200
milestones in GitHub, so you can understand what our action plans are, and also we have

149
00:17:21,200 --> 00:17:27,280
discussions open that we use for announcement, that we use for, yeah, gathering opinions,

150
00:17:27,280 --> 00:17:32,760
like DNF 5 naming is discussed on GitHub, so you can go there and give your opinion,

151
00:17:32,760 --> 00:17:37,000
and questions of course, if you have a question now, you can ask it, if you have a question

152
00:17:37,000 --> 00:17:42,560
later, there will be the link to GitHub to just go there and ask something, and of course

153
00:17:42,560 --> 00:17:49,680
we have bugzilla for Fedora tracking, and I mean, downstream requests or specific Fedora

154
00:17:49,680 --> 00:17:56,200
things, but like, the upstream is where we start, and the upstream is where we are trying

155
00:17:56,200 --> 00:18:04,160
to improve to the community, a bit more to that, we have now a better documentation,

156
00:18:04,160 --> 00:18:10,720
the documentation is actually generated from the code base, it is tested, so everything,

157
00:18:10,720 --> 00:18:16,360
every snippet that's there gets compiled if it's C++, gets interpreted if it's in Python,

158
00:18:16,360 --> 00:18:25,160
and so it's much more, let's say, reliable documentation, so we expect to have, I'm not

159
00:18:25,160 --> 00:18:30,160
saying what we expect to have, you know what, because you'll never know, but then we have

160
00:18:30,160 --> 00:18:39,840
now tutorials, we have code in place, we have a lot more material that Newcomer could work

161
00:18:39,840 --> 00:18:49,080
on and start to contribute to DNF using that material, right, and then we are planning

162
00:18:49,080 --> 00:18:53,880
to also add contributing guides that now are missing, but we are planning to improve the

163
00:18:53,880 --> 00:19:01,400
contribution workflow on GitHub yet again, and also to open first-time issues which are

164
00:19:01,400 --> 00:19:09,160
missing, but we are targeting that, so just to conclude my part, who's the community?

165
00:19:09,160 --> 00:19:13,400
Actually the community for us is the people who create issues, I mean, not create problems,

166
00:19:13,400 --> 00:19:19,320
create GitHub issues, right, people who add or remove code, and people who take part in

167
00:19:19,320 --> 00:19:25,440
the discussions, even now, even just by coming to us and saying, hey, DNF, you know what,

168
00:19:25,440 --> 00:19:31,480
I tried it, it worked, or it broke my system, it happened, so I mean, it can happen, it's

169
00:19:31,480 --> 00:19:38,120
not perfect, or the people who raise questions, like now, or again, they are reaching back

170
00:19:38,120 --> 00:19:44,400
to us to the mailing list, the more questions we have, the more reliable we can provide

171
00:19:44,400 --> 00:19:50,640
a code that actually works for the most user cases, so, and just using DNF, you are part

172
00:19:50,640 --> 00:19:58,880
of the community, and most importantly, and I really feel this quite a lot, because when

173
00:19:58,880 --> 00:20:06,720
I started working on DNF, I actually needed help from the team, and I believe that many

174
00:20:06,720 --> 00:20:15,520
people didn't quite dive into the contribution system, because they didn't have help, so

175
00:20:15,520 --> 00:20:23,160
we are actually in the need of people that help, and ask for help, and that will bring

176
00:20:23,160 --> 00:20:29,800
to all the other points, so, well, I hope now it's much more clear how we intend to

177
00:20:29,800 --> 00:20:39,080
work in the future, and now, let's see how DNF 5 works in practice with the demo, so

178
00:20:39,080 --> 00:20:43,120
here you go, Jan will talk to you about the demo.

179
00:20:43,120 --> 00:20:52,880
Okay, so hopefully it will work, so, okay, let's try some hands-on UCGs, and what do

180
00:20:52,880 --> 00:21:00,960
we have here, so, we have two separate individual containers, both running Federal Unix, and

181
00:21:00,960 --> 00:21:06,760
on the, they have the same configuration, and on the left side, I will show you the

182
00:21:06,760 --> 00:21:13,120
examples using the original DNF command, and on the right side, I will show you the same

183
00:21:13,120 --> 00:21:21,160
examples running the DNF 5 command, so, let's start with something simple, just install

184
00:21:21,160 --> 00:21:32,080
a package, so, we will try to install this package, hopefully the Wi-Fi will work, and

185
00:21:32,080 --> 00:21:42,240
I will try the same on the right side, okay, and now, what's going on, we need to download

186
00:21:42,240 --> 00:21:48,040
the metadata about the packages, so, basically, what are the packages, what are their dependencies,

187
00:21:48,040 --> 00:21:56,680
the requirements, so, the definition of repositories is configured in the system, and now we need

188
00:21:56,680 --> 00:22:05,200
to just pull all the metadata from repositories, and now we can see the first difference between

189
00:22:05,200 --> 00:22:13,760
the DNF and DNF 5, what I was already talking about, and it's the size of the metadata,

190
00:22:13,760 --> 00:22:21,400
because in DNF, everything was hard-coded, and always, all metadata was downloaded,

191
00:22:21,400 --> 00:22:29,080
so there is, like, 64 megabytes for the Fedora 37 repository, and if we look into DNF 5,

192
00:22:29,080 --> 00:22:34,200
there is just 21 megabytes, and it's because of the file lists are not there by default,

193
00:22:34,200 --> 00:22:41,000
because usually we don't need them, okay, we can see some differences in the outputs,

194
00:22:41,000 --> 00:22:47,520
like, for the DNF 5, we have some more information there, like, what packages are being replaced,

195
00:22:47,520 --> 00:22:58,320
yes, but it's basically, it looks very similar, but the output should be a little bit more

196
00:22:58,320 --> 00:23:07,760
convenient for the user, so let's try to install the packages, and, yeah, that's it, basically.

197
00:23:07,760 --> 00:23:15,320
Another example, Alice was talking about the auto-completion, so this was also improved,

198
00:23:15,320 --> 00:23:21,920
we can see that for DNF, there was also some auto-completion, if we try, for example, the

199
00:23:21,920 --> 00:23:29,480
mark command, I will type the M, and now the double-tap, and we can see the DNF offers

200
00:23:29,480 --> 00:23:34,880
the commands for us, okay, that's fine, but the mark command has also the sub-commands,

201
00:23:34,880 --> 00:23:42,280
so if I type the double-tap again, oh, it shows me, like, the installed packages on the system,

202
00:23:42,280 --> 00:23:50,520
so these are the arguments I should use, but if we see the help, like, we need to use one

203
00:23:50,520 --> 00:23:57,600
of those three sub-commands, and these are not suggested by the DNF, so this was improved

204
00:23:57,600 --> 00:24:04,400
for DNF 5, we can look at this, if we put the M and double-tap, we can already see that

205
00:24:04,400 --> 00:24:08,680
there is some difference, there is also some brief description of the sub-commands that

206
00:24:08,680 --> 00:24:16,960
are all the commands that are offered for us, and if we now put the double-tap again,

207
00:24:16,960 --> 00:24:25,840
we can see also the sub-commands there, so, and, of course, there is also the auto-completion

208
00:24:25,840 --> 00:24:33,360
of the option, so we can use the double-tap again, and we can see all the parameters that

209
00:24:33,360 --> 00:24:41,960
are relevant to this command, and it's quite, it could be quite convenient, so now let's

210
00:24:41,960 --> 00:24:52,600
try some performance comparison, so, for example, the repo query command was quite improved,

211
00:24:52,600 --> 00:24:59,440
so it's basically the command for querying the packages based on some keywords, on filtering

212
00:24:59,440 --> 00:25:08,280
it, and so on, but for this example, we will use just the empty repo query, which basically

213
00:25:08,280 --> 00:25:17,400
lists all the available packages in repositories, so let's try that, running also for DNF 5,

214
00:25:17,400 --> 00:25:23,120
and we can see that the DNF 5 was a little bit faster, but let's measure it exactly,

215
00:25:23,120 --> 00:25:34,160
so let's use the time command, and the same for DNF 5, and we can see for DNF it was like

216
00:25:34,160 --> 00:25:42,040
almost three seconds, and for DNF 5 it was one second, so it's a little bit faster there,

217
00:25:42,040 --> 00:25:52,360
and we can also try some more advanced repo query, so we can list all the packages that

218
00:25:52,360 --> 00:26:02,680
depend on CuraLibrary, and we will see that there will be, oh, there should be quite a

219
00:26:02,680 --> 00:26:16,200
big difference, all right, so what depends on, right, so running it, I will try to run

220
00:26:16,200 --> 00:26:28,320
it parallel, and we will see, okay, so here is about six seconds for DNF 5, it's quite

221
00:26:28,320 --> 00:26:38,720
fast, and for DNF it will be like three times longer, I think, okay, twenty seconds, okay,

222
00:26:38,720 --> 00:26:51,280
so that's it from the CLI demo, and we can move to API, and you could ask why I should

223
00:26:51,280 --> 00:26:58,840
introduce the API, well, of course it depends on the use cases, but usually if your project

224
00:26:58,840 --> 00:27:07,200
has like support, one of our scripting languages we have the bindings for, like the Python,

225
00:27:07,200 --> 00:27:13,520
it could be much more convenient to use directly the API, and also it's more powerful than

226
00:27:13,520 --> 00:27:25,920
the CLI interface, but some common use cases are simpler to write through the command line,

227
00:27:25,920 --> 00:27:33,760
and so sometimes in the end the client chooses both approaches, right, okay, so let's see

228
00:27:33,760 --> 00:27:41,840
some simple API example, let's say we have some, our favorite package, and we want to

229
00:27:41,840 --> 00:27:48,800
know what are the latest available version of this package in different federal releases,

230
00:27:48,800 --> 00:27:57,200
could be useful, so let's see step by step what we need to do, so if we have installed

231
00:27:57,200 --> 00:28:05,280
the double packages and the API bindings following our tutorials on the GitHub pages, the importing

232
00:28:05,280 --> 00:28:11,120
of the Python module is super simple, then we need to set up the session for the DNF,

233
00:28:11,120 --> 00:28:21,240
and running some initialization method, then we need to override the release version variable,

234
00:28:21,240 --> 00:28:30,040
which is basically used in the repository URL, so we always look only for the packages

235
00:28:30,040 --> 00:28:38,600
of the respective federal release, then we need to prepare or load the repositories from

236
00:28:38,600 --> 00:28:47,720
the configuration and prepare like the objects for the Python, and then we need to prepare

237
00:28:47,720 --> 00:28:54,360
the query, what we will actually be querying, so this is also quite simple, there is a package

238
00:28:54,360 --> 00:29:00,760
query object, and we will just filter all the packages containing the kernel name, and

239
00:29:00,760 --> 00:29:08,000
we want to have the latest version always, that's simple, and if we found any of those

240
00:29:08,000 --> 00:29:14,080
packages containing kernel, we just print the name of the package, otherwise not available,

241
00:29:14,080 --> 00:29:24,920
okay let's try it, running this simple script, and for federal 35 there is this kernel version,

242
00:29:24,920 --> 00:29:36,760
for federal 36 there will be some probably newer one, it's taking long, and also should

243
00:29:36,760 --> 00:29:46,560
output for federal 37 something a little bit newer, okay, now we can try to edit our script,

244
00:29:46,560 --> 00:29:55,040
and show you if we have already some dnf5 package available, but yeah, we need to add

245
00:29:55,040 --> 00:30:16,920
here a raw height version, a development version of the Fedora, doesn't work, I don't know how

246
00:30:16,920 --> 00:30:30,240
to, does anyone know how to exit V? I couldn't resist, I need to escape, it's a different

247
00:30:30,240 --> 00:30:40,360
laptop, and the thing is that it's actually a different laptop, because the htmi wasn't

248
00:30:40,360 --> 00:31:00,240
working, so I don't know, escape is not working, thank you, if anyone has any questions we

249
00:31:00,240 --> 00:31:05,560
will try to move on, and maybe we can move on, okay so you will never know if dnf5 is

250
00:31:05,560 --> 00:31:13,400
actually in some fedora, well guess what we will say it anyways, but it's always exiting

251
00:31:13,400 --> 00:31:32,440
it, oh maybe I got it, so in federal 35 there is no dnf5, in federal 36 no dnf5, oh maybe

252
00:31:32,440 --> 00:31:54,840
for raw height, no, it's taking some time, I don't know, maybe just, oh it's there, okay,

253
00:31:54,840 --> 00:32:05,400
we can move to some more challenging example, but if we want to add some, our awesome new

254
00:32:05,400 --> 00:32:13,240
command to dnf5, so then the user will install it and just type dnf5, our command and it

255
00:32:13,240 --> 00:32:20,360
will do the magic, it's quite simple, we can show it to write some simple dnf5 plugin in

256
00:32:20,360 --> 00:32:26,560
like 5 minutes, so what do we need, okay we need devil and binding packages, that's no

257
00:32:26,560 --> 00:32:32,840
problem, we can install it following the tutorials, we need some template sources, okay you can

258
00:32:32,840 --> 00:32:41,280
steal our dnf5 plugin sources and use them, and you need some build tools and build script

259
00:32:41,280 --> 00:32:46,800
and you can also steal the cmake script we have for the dnf5 plugin, no problem, everything

260
00:32:46,800 --> 00:32:54,720
is in our dnf5 repository, and now how to write it, you can follow like our structure

261
00:32:54,720 --> 00:33:01,840
of dnf5 plugins, it's basically always some definition file like the header, what's there,

262
00:33:01,840 --> 00:33:09,680
the actual implementation, the cpp file and then there is like the adapter for the plugin

263
00:33:09,680 --> 00:33:16,800
API, but it's like boilerplate code, you just need to change few lines and it will work,

264
00:33:16,800 --> 00:33:23,760
so let's look at this c++ example, there is the implementation of really simple example

265
00:33:23,760 --> 00:33:33,080
command, and it's following like the command interface from the dnf5, so there is some

266
00:33:33,080 --> 00:33:40,440
methods for the setup of the command we need to follow, in this step we need to tell the

267
00:33:40,440 --> 00:33:47,880
dnf5 we have some new command, so we basically register our new command into the dnf5, this

268
00:33:47,880 --> 00:33:53,800
is super simple and it could be copied from other plugins, then there is setting the argument

269
00:33:53,800 --> 00:34:02,360
parser, basically parsing the arguments, what are the arguments for our new command, listing

270
00:34:02,360 --> 00:34:07,120
all the positional arguments and what we have, but in this simple example we don't have any,

271
00:34:07,120 --> 00:34:13,960
so we just set some simple description, in the configure section we can like modify the

272
00:34:13,960 --> 00:34:20,280
dnf5 session, change some configuration or request some optional method that we downloaded,

273
00:34:20,280 --> 00:34:27,880
here we just gonna be quiet, and there is the actual implementation of the command in the

274
00:34:27,880 --> 00:34:35,960
run method where we just, we will just output something on the terminal, and here I will

275
00:34:35,960 --> 00:34:44,200
show briefly the editor code, so this is the boilerplate one, you just copy it and change

276
00:34:44,200 --> 00:34:51,680
a couple of things, this is like the plugin name, the version like name your outer and

277
00:34:51,680 --> 00:34:59,160
name of the plugin, then there is long block of some boilerplate code that is same for

278
00:34:59,160 --> 00:35:09,960
all the plugins, each plugin consists of one or more commands, so we just put our new command

279
00:35:09,960 --> 00:35:18,000
into the list, and finally we need to return the instance of our new plugin class, and

280
00:35:18,000 --> 00:35:25,760
that's it, so let's try to build it and run it, at first I will show you that there is

281
00:35:25,760 --> 00:35:37,600
no, no example command for dnf5 right now, so I'm not cheating, right, and here are the

282
00:35:37,600 --> 00:35:44,000
sources, right, there is the cpp file I was, I was showing, then there is the header file

283
00:35:44,000 --> 00:35:49,960
which is basically just the definition, and the adapter code in the example plugin cpp,

284
00:35:49,960 --> 00:35:56,680
and then there is the build script for the cmake which is, which is stolen from the dnf5

285
00:35:56,680 --> 00:36:06,840
sources, okay, so we just need to create build folder, and then we will do everything to

286
00:36:06,840 --> 00:36:20,040
make it, woo, there is again some weird keyboard, wow, I need, this is not English, I need like

287
00:36:20,040 --> 00:36:39,720
the mperstand, English, no, this one, how to, where is it, there we are, nice, oh, it's,

288
00:36:39,720 --> 00:36:59,960
how did you, what happened, I don't know, this, show me again, what the shift and, oh, it's

289
00:36:59,960 --> 00:37:09,800
printed in Italian, sorry, so make it, make install, so basically just build the sources,

290
00:37:09,800 --> 00:37:14,240
and the installation is just the copying of the library into the correct place where the

291
00:37:14,240 --> 00:37:25,440
dnf looks for it, so building is done, and we can try running dnf5 example, and yes, we

292
00:37:25,440 --> 00:37:44,560
did it, let's see, okay, so when will dnf5 release, you discovered already, dnf5 is actually

293
00:37:44,560 --> 00:37:55,000
already in fedora row height, so 38, and there is a plan to, well, in a moment, so first

294
00:37:55,000 --> 00:38:00,320
of all, if you're running stable fedora 36 or 37, you can use a hopper to try it, and

295
00:38:00,320 --> 00:38:05,880
it will be parallel installation with dnf, and also here are all the sources that we

296
00:38:05,880 --> 00:38:11,240
have for whatever, you can find everything in the github repo, that's the only link you

297
00:38:11,240 --> 00:38:18,360
need, there's everything there, we have all the links copied in the talk information,

298
00:38:18,360 --> 00:38:22,400
if you run fedora row height, or if you're in a container of row height, you want to

299
00:38:22,400 --> 00:38:28,360
try it, it's there, so just dnf install dnf5, and you're good, and something more about

300
00:38:28,360 --> 00:38:37,520
it when it will actually land in fedora, so there is a plan to do a major upgrade of micro

301
00:38:37,520 --> 00:38:45,080
dnf that will actually sim link to dnf5, so it will be replaced in fedora 38, and in

302
00:38:45,080 --> 00:38:55,400
fedora 39, there's the plan to replace dnf with dnf5, so it's coming, and we hope to

303
00:38:55,400 --> 00:39:11,840
be ready for that, that's it, thank you, and if you have questions, you have time, so any

304
00:39:11,840 --> 00:39:29,680
question? Thank you so much for this presentation, my question is related to community, you demonstrated

305
00:39:29,680 --> 00:39:37,800
there is quite a few people that are not making more than like one, two, three, four commits,

306
00:39:37,800 --> 00:39:45,000
can you tell me what is your plan to help people contribute more, how are you going

307
00:39:45,000 --> 00:40:01,120
to improve the contributor experience? Thank you for the question, so the idea is to once

308
00:40:01,120 --> 00:40:09,320
again make it simpler and be more proactive to help people, so again in the past we weren't

309
00:40:09,320 --> 00:40:16,160
very responsive, and people got pissed because their code was just ignored, and their questions

310
00:40:16,160 --> 00:40:24,400
were not as important as maintaining dnf, or that was a perception from the outside,

311
00:40:24,400 --> 00:40:32,160
and now we try to, again, every week we go through all the discussions, all the new issues,

312
00:40:32,160 --> 00:40:37,160
all the new PRs from community, in all our components, and we set an action plan for

313
00:40:37,160 --> 00:40:41,600
that, so we set the milestones in every one of that, it's like we want to make this land

314
00:40:41,600 --> 00:40:48,920
in fedora 38, we want to make this land in fedora 39, so you know what is our priority,

315
00:40:48,920 --> 00:40:56,400
and we take seriously, in serious considerations, PRs, so if you just drop some code, it's very

316
00:40:56,400 --> 00:41:03,240
easy for us to review it and be proactive to that, and once again, it's done weekly

317
00:41:03,240 --> 00:41:24,160
and it's on our priority, our workflow has changed, hope you answered, thank you.

318
00:41:24,160 --> 00:41:33,680
Just a technical curiosity, is the new dnf5demon intended to replace the packagekitdemon?

319
00:41:33,680 --> 00:41:49,880
Is the dnf5demon intended to replace the packagekitdemon?

320
00:41:49,880 --> 00:41:56,040
So it can, we did start with that in mind, because packagekit was officially deprecated

321
00:41:56,040 --> 00:42:02,320
before, so that was one of the goals, but lately I've seen that packagekit is maintained,

322
00:42:02,320 --> 00:42:08,720
and there is even issue on our page that someone wants to create back end for dnf5 for the

323
00:42:08,720 --> 00:42:16,640
new IPI for packagekit, so I'm not sure how it will turn up, but we will see, it was the

324
00:42:16,640 --> 00:42:19,040
plan originally.

325
00:42:19,040 --> 00:42:33,760
So the thing is packagekit works, so it's not that easy to, I'm hearing, okay, well,

326
00:42:33,760 --> 00:42:38,680
I would say that for now gets the job done, but still, there's an alternative, actually

327
00:42:38,680 --> 00:42:44,120
the first enablement of dnfdemon on the system, they will be for other components that are

328
00:42:44,120 --> 00:42:50,520
less critical to probably to adapt to the new dnf, or actually the new IPI, we're looking

329
00:42:50,520 --> 00:42:58,160
at cockpit, for example, that could use the demon, or anaconda maybe could use it, so

330
00:42:58,160 --> 00:43:07,480
it's not just packagekit for which the demon would be relevant, let's say that.

331
00:43:07,480 --> 00:43:12,840
Just finally, we would like to do that because, like to replace it because it could provide,

332
00:43:12,840 --> 00:43:16,520
for example, like I mentioned, the module support, or group support, even to Grom Software,

333
00:43:16,520 --> 00:43:26,480
which is currently not possible, and that would be nice, yeah, so any other questions?

334
00:43:26,480 --> 00:43:42,800
Hello, I do also have a community participation question, are you talking, or have you considered

335
00:43:42,800 --> 00:43:50,640
reaching out to other RPM-based distributions beyond Fedora and the CentOS, like OpenMundry

336
00:43:50,640 --> 00:44:13,000
or our SUSE, perhaps, thank you. I mean, I'm not in contact because no one here is project

337
00:44:13,000 --> 00:44:18,880
manager or team lead, let's say that, I would let another team member of us answer into that,

338
00:44:18,880 --> 00:44:26,520
yes, of course, the RPM distributions are taken into account, and all the relatives

339
00:44:26,520 --> 00:44:33,560
to Fedora, they're of course taken into account. The thing is, for now, let's say it's a quite

340
00:44:33,560 --> 00:44:39,800
younger project, NFI, it's just two years since it has started the developing, and so

341
00:44:39,800 --> 00:44:43,240
I would say that this is the reason why we're just talking about Fedora, Fedora, Fedora,

342
00:44:43,240 --> 00:44:51,000
because this is our upstream where we do the testing, our CI runs on Fedora, and well,

343
00:44:51,000 --> 00:44:59,480
I think that we definitely would be porting, or we would be very happy to see the NF5 land

344
00:44:59,480 --> 00:45:14,360
in other RPM distributions. I think that's it.

345
00:45:14,360 --> 00:45:32,760
Okay, thank you again. Thank you. Thank you, everyone.

346
00:45:32,760 --> 00:45:49,160
Thank you.

