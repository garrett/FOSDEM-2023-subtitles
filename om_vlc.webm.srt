1
00:00:00,000 --> 00:00:23,120
Yeah, so I'm going to do two small presentation because those are short talks and I didn't

2
00:00:23,120 --> 00:00:25,560
want to take too much time today.

3
00:00:25,560 --> 00:00:32,400
So we're going to speak about FFMPEG and mostly FFMPEG6.0, and then I will speak about

4
00:00:32,400 --> 00:00:39,200
a new project called VLC.js, but it's a lie, it's not really VLC.js.

5
00:00:39,200 --> 00:00:42,600
So who am I?

6
00:00:42,600 --> 00:00:47,560
My name is Jean-Retier, some of you know me, some don't, so I'm president of Vidoran,

7
00:00:47,560 --> 00:00:54,840
I've been working on VLC for, okay, I'm close to 40, so 17 years.

8
00:00:54,840 --> 00:01:00,320
I've been involved in X264, which is a Vidoran project, David, which is a AV1 decoder and

9
00:01:00,320 --> 00:01:08,200
lately a bit on FFMPEG, mostly on the community management, which is a funny topic.

10
00:01:08,200 --> 00:01:12,440
I shouldn't be the one presenting this presentation, but the people who should do this presentation

11
00:01:12,440 --> 00:01:17,720
are maybe in this room and don't want to present, so that's why I'm presenting.

12
00:01:17,720 --> 00:01:21,560
Jokes aside, like if you look at the first time, open media room, like there is almost

13
00:01:21,560 --> 00:01:24,520
no FFMPEG talk, which is completely insane.

14
00:01:24,520 --> 00:01:29,040
VLCR is better, thanks to Kiran and Tourémy, but it's ridiculous.

15
00:01:29,040 --> 00:01:33,000
If you look also in the archives, look in the archives, there's almost no FFMPEG, general

16
00:01:33,000 --> 00:01:34,000
FFMPEG talk.

17
00:01:34,000 --> 00:01:37,640
One, everything in the multimedia in the open source world and outside of the open source

18
00:01:37,640 --> 00:01:39,680
world is actually based on FFMPEG.

19
00:01:39,680 --> 00:01:44,400
And when I mean everything, I mean everything you see online, and most of those, like you

20
00:01:44,400 --> 00:01:48,920
go to those big trade shows and they are all amazing cloud encoding, so on, and it's just

21
00:01:48,920 --> 00:01:52,360
like a very nice whopper to FFMPEG.

22
00:01:52,360 --> 00:01:57,740
And of course when I say FFMPEG, please understand, this is FFMPEG plus Libix264 plus Libix65

23
00:01:57,740 --> 00:02:04,880
plus LibixBPX plus David plus all the other ex-vibes, all the libraries that I forget,

24
00:02:04,880 --> 00:02:13,660
so, and even on our voici on Mademoiselle, like you know those French fashion thing

25
00:02:13,660 --> 00:02:17,640
that we have, which is called Hacker News, even on Hacker News, like when there is a

26
00:02:17,640 --> 00:02:20,400
release of FFMPEG, it's not even the top Hacker News, right?

27
00:02:20,400 --> 00:02:22,760
So that means that we are doing something wrong,

28
00:02:22,760 --> 00:02:25,400
which means we don't communicate enough on FFMPEG.

29
00:02:25,400 --> 00:02:27,280
So here I am.

30
00:02:27,280 --> 00:02:29,840
So the community is healthy.

31
00:02:29,840 --> 00:02:33,720
We've had some fights in the past, to be honest.

32
00:02:33,720 --> 00:02:35,640
The folks are long gone.

33
00:02:35,640 --> 00:02:37,680
And most of the people working now on FFMPEG

34
00:02:37,680 --> 00:02:41,080
also pops lots of new people who are not there

35
00:02:41,080 --> 00:02:43,440
at the folk time, but also people from both folks

36
00:02:43,440 --> 00:02:44,880
are still working on FFMPEG.

37
00:02:44,880 --> 00:02:47,480
That's pretty cool, especially since we've not

38
00:02:47,480 --> 00:02:49,280
seen that many open source community being

39
00:02:49,280 --> 00:02:51,440
able to work together after those kind of events.

40
00:02:54,280 --> 00:02:56,680
So here I'm just going to speak just quickly

41
00:02:56,680 --> 00:03:00,640
about FFMPEG 5.0, which was around almost exactly

42
00:03:00,640 --> 00:03:02,120
one year ago.

43
00:03:02,120 --> 00:03:04,800
It was very important because we

44
00:03:04,800 --> 00:03:07,000
tried to match the new release schedules that I'm

45
00:03:07,000 --> 00:03:08,240
going to talk about.

46
00:03:08,240 --> 00:03:12,360
But it's also that it was probably the biggest API

47
00:03:12,360 --> 00:03:14,920
breakage ever on FFMPEG.

48
00:03:14,920 --> 00:03:17,440
I think just a train of commerce removing deprecation

49
00:03:17,440 --> 00:03:20,200
samples was around 130 commits.

50
00:03:20,200 --> 00:03:21,480
And the diff was huge.

51
00:03:21,480 --> 00:03:25,240
So some APIs were there deprecated to 2013

52
00:03:25,240 --> 00:03:27,480
and were removed in 5.0.

53
00:03:27,480 --> 00:03:29,720
So this is probably going to impact a lot of you

54
00:03:29,720 --> 00:03:32,720
because a lot of distribution are still on 4.4.

55
00:03:32,720 --> 00:03:36,040
But 5.0 is a big change of APIs.

56
00:03:36,040 --> 00:03:39,120
And mostly one big thing is that it's

57
00:03:39,120 --> 00:03:41,760
one API to decode both audio and video,

58
00:03:41,760 --> 00:03:45,760
and not AV codec video, decode four, five, six,

59
00:03:45,760 --> 00:03:48,800
and so on, all those APIs.

60
00:03:48,800 --> 00:03:51,080
It's not doing subtitles yet, but I

61
00:03:51,080 --> 00:03:53,040
was promised that someone will do it this year.

62
00:03:53,040 --> 00:03:55,040
Where is Anton?

63
00:03:55,040 --> 00:03:56,080
Yeah.

64
00:03:56,080 --> 00:04:00,920
So and yeah, we did a lot of new things.

65
00:04:00,920 --> 00:04:05,560
AV frame based API in SW scale, new bit fields streaming

66
00:04:05,560 --> 00:04:11,400
filters, a lot of things to clean AV format and AV codec.

67
00:04:11,400 --> 00:04:13,680
It's disentangling those two libraries,

68
00:04:13,680 --> 00:04:15,840
working on the decoder context, et cetera.

69
00:04:15,840 --> 00:04:20,200
You should look at the release notes on that.

70
00:04:20,200 --> 00:04:24,160
There are some people who are doing amazing work, mostly

71
00:04:24,160 --> 00:04:26,480
Andreas and James, who are basically removing

72
00:04:26,480 --> 00:04:28,360
all the craft on FFMPEG.

73
00:04:28,360 --> 00:04:31,920
So one day the whole FFMPEG will be thread safe.

74
00:04:31,920 --> 00:04:33,480
We believe that, right?

75
00:04:33,480 --> 00:04:36,400
And AV codec, any of the format will be completely split.

76
00:04:36,400 --> 00:04:37,200
Yeah, OK, maybe not.

77
00:04:37,200 --> 00:04:39,720
But there is a lot of work to be done,

78
00:04:39,720 --> 00:04:42,520
and that's very important for security reasons.

79
00:04:42,520 --> 00:04:46,080
Michael, who's still probably the oldest FFMPEG contributor,

80
00:04:46,080 --> 00:04:49,560
is still like fuzzing FFMPEG every day.

81
00:04:49,560 --> 00:04:51,400
Slice thread setting is W scale.

82
00:04:51,400 --> 00:04:55,320
IMF digmixing, which is good because so many professionals

83
00:04:55,320 --> 00:04:57,520
are using IMEF format, and they usually

84
00:04:57,520 --> 00:05:00,840
do weird things on FFMPEG, or above FFMPEG,

85
00:05:00,840 --> 00:05:02,360
and then we have to deal with their shit,

86
00:05:02,360 --> 00:05:03,360
because it's wrongly marked.

87
00:05:03,360 --> 00:05:07,200
So now we're actually getting that directly into FFMPEG.

88
00:05:07,200 --> 00:05:11,040
Dolby vision, I'm not sure exactly which part of the vision,

89
00:05:11,040 --> 00:05:13,840
because there is, as many of you know, a five or six profile.

90
00:05:13,840 --> 00:05:16,400
But I think at least profile five were there.

91
00:05:16,400 --> 00:05:17,960
And of course, a lot of things.

92
00:05:17,960 --> 00:05:21,320
And one of the cool things was the integration of LiPlaCibo,

93
00:05:21,320 --> 00:05:26,280
which used to be the MPV video filtering framework, mostly

94
00:05:26,280 --> 00:05:30,160
GPU accelerated, that is now into FFMPEG.

95
00:05:30,160 --> 00:05:34,680
And you can use that without GPU, easily with emulation.

96
00:05:34,680 --> 00:05:39,080
So the old APIs, like you know the old APIs,

97
00:05:39,080 --> 00:05:42,840
and now what's interesting is that it's more async-based,

98
00:05:42,840 --> 00:05:48,000
and so you don't need to do those horrible weight.

99
00:05:48,000 --> 00:05:53,120
5.1, so that was like six months ago in July.

100
00:05:53,120 --> 00:05:55,440
This one is important for you, because it's an LTS.

101
00:05:55,440 --> 00:05:59,680
5.0 is not LTS, so we're going to try to make that,

102
00:05:59,680 --> 00:06:03,520
to fix at least the security bugs for a couple of years.

103
00:06:03,520 --> 00:06:07,040
And most of the things that were added were a lot of features,

104
00:06:07,040 --> 00:06:09,840
but one of the major API that was merged was the change

105
00:06:09,840 --> 00:06:13,480
of the audio channel layout API, which

106
00:06:13,480 --> 00:06:15,880
was supposed to come in 5.0, but we missed.

107
00:06:15,880 --> 00:06:18,160
And then we said, well, it's going to take too much time.

108
00:06:18,160 --> 00:06:22,080
So we did that with 5.1.

109
00:06:22,080 --> 00:06:24,760
A lot of optimization on ARM in that release,

110
00:06:24,760 --> 00:06:26,960
mostly on HVC decoding, a lot of things

111
00:06:26,960 --> 00:06:30,000
on everyone decoding in hardware,

112
00:06:30,000 --> 00:06:32,640
because there is still 25 different APIs

113
00:06:32,640 --> 00:06:34,480
to do hardware acceleration.

114
00:06:34,480 --> 00:06:35,880
But soon there will be a new one that

115
00:06:35,880 --> 00:06:37,320
is going to replace all of them, which

116
00:06:37,320 --> 00:06:41,960
is Vulkan video decoding, and we'll have a 14 standards.

117
00:06:41,960 --> 00:06:47,640
JPEG Excel decoding, and a lot of things on SVTV1.

118
00:06:47,640 --> 00:06:51,080
So yeah, the channel layout API was developed in 2013,

119
00:06:51,080 --> 00:06:52,040
I think, by Vittorio.

120
00:06:52,040 --> 00:06:53,520
I'm not sure he's around.

121
00:06:53,520 --> 00:06:54,800
Yeah, Vittorio.

122
00:06:54,800 --> 00:06:59,000
That was done during the fork, and it was quite complex.

123
00:06:59,000 --> 00:07:01,800
But this is good, because it's ready to do what we called,

124
00:07:01,800 --> 00:07:03,840
well, well, marketing calls NGA, which

125
00:07:03,840 --> 00:07:06,880
is next generation audio, what marketing also

126
00:07:06,880 --> 00:07:10,360
calls Dolby Atmos, those kind of object-based audio.

127
00:07:10,360 --> 00:07:14,400
And the new channel layout API allows

128
00:07:14,400 --> 00:07:18,040
to be a lot more flexible to custom layouts and weird things

129
00:07:18,040 --> 00:07:20,240
without us having to do everything directly inside

130
00:07:20,240 --> 00:07:20,960
FFMPEG.

131
00:07:20,960 --> 00:07:23,600
So, and I'm still not starting about my main topic, which

132
00:07:23,600 --> 00:07:25,840
is FFMPEG 6.0.

133
00:07:25,840 --> 00:07:28,040
I hope when I was submitting the call that this would have

134
00:07:28,040 --> 00:07:32,240
been tagged, and that's important.

135
00:07:32,240 --> 00:07:35,680
I think this is even bigger in terms of a number of commits,

136
00:07:35,680 --> 00:07:37,920
and mostly in terms of contributors,

137
00:07:37,920 --> 00:07:40,360
because in the last six months, there

138
00:07:40,360 --> 00:07:42,840
have been around 191 contributors.

139
00:07:42,840 --> 00:07:47,480
That's huge, and that's a lot bigger than the previous release.

140
00:07:47,480 --> 00:07:49,320
What is important?

141
00:07:49,320 --> 00:07:54,400
There is not that many important API breakage and changes,

142
00:07:54,400 --> 00:07:56,200
but there is new APIs.

143
00:07:56,200 --> 00:07:58,160
And also, it's a major bump, so we

144
00:07:58,160 --> 00:08:00,880
are going to remove more things that were deprecated

145
00:08:00,880 --> 00:08:04,400
in the last few years, and that was like two new APIs

146
00:08:04,400 --> 00:08:06,440
so that we didn't remove them in 5.0.

147
00:08:06,440 --> 00:08:09,200
But we are going to remove that soon?

148
00:08:09,200 --> 00:08:11,800
Soon.

149
00:08:11,800 --> 00:08:18,520
One of the major changes is one of the most difficult thing

150
00:08:18,520 --> 00:08:22,400
that we've seen is multishrouding the FFMPEG CLI.

151
00:08:22,400 --> 00:08:28,000
So all those big guys are at YouTube and Vimeo and Facebook,

152
00:08:28,000 --> 00:08:33,720
and all those providers of FFMPEG nice UIs are basically

153
00:08:33,720 --> 00:08:35,240
one of the things they complained about

154
00:08:35,240 --> 00:08:37,040
is lack of multishrouding and FFMPEG.

155
00:08:37,040 --> 00:08:40,600
So they invent a lot of weird frameworks to do that,

156
00:08:40,600 --> 00:08:44,600
so there is a lot of work to do that directly inside FFMPEG.

157
00:08:44,600 --> 00:08:47,720
It's going to go on for the whole year, I think,

158
00:08:47,720 --> 00:08:50,560
for all 2023, but that means that a lot of things

159
00:08:50,560 --> 00:08:52,600
will be better for you to use.

160
00:08:52,600 --> 00:08:54,160
And of course, when you do that, you

161
00:08:54,160 --> 00:08:57,040
need to actually care about threat safety and clean up.

162
00:08:57,040 --> 00:08:58,520
So that's a lot of cleanups.

163
00:08:58,520 --> 00:09:00,720
What was done for 5.0 was that the mercs

164
00:09:00,720 --> 00:09:02,800
are now in their own threads.

165
00:09:02,800 --> 00:09:04,640
There will be more things.

166
00:09:04,640 --> 00:09:07,400
There is now a risk 5 optimization, or at least

167
00:09:07,400 --> 00:09:11,520
the framework to do that, inside FFMPEG.

168
00:09:11,520 --> 00:09:12,960
One of the things that is important

169
00:09:12,960 --> 00:09:16,360
is that you've probably seen that all the big guys building

170
00:09:16,360 --> 00:09:18,760
GPUs have now shipped AV1 encoders.

171
00:09:18,760 --> 00:09:22,760
So in 6.0, we've got Intel, N, NVIDIA, and AMD.

172
00:09:22,760 --> 00:09:25,680
So you can actually encode AV1 in hardware.

173
00:09:25,680 --> 00:09:27,120
And that's actually very fast.

174
00:09:27,120 --> 00:09:31,640
You can reach 30 FPS in 1080p without any problem

175
00:09:31,640 --> 00:09:32,160
with those cards.

176
00:09:32,160 --> 00:09:35,440
And it's actually decent quality.

177
00:09:35,440 --> 00:09:37,640
It's not as good as the SVT AV1, of course,

178
00:09:37,640 --> 00:09:40,120
but it's pretty good.

179
00:09:40,120 --> 00:09:45,880
There was a lot of work on the FFT code by Lynn.

180
00:09:45,880 --> 00:09:46,560
She's over there.

181
00:09:46,560 --> 00:09:48,480
She can tell you about that.

182
00:09:48,480 --> 00:09:52,320
And I think it's like, I don't know how much faster it is,

183
00:09:52,320 --> 00:09:53,120
but it's a lot faster.

184
00:09:53,120 --> 00:09:55,800
So all the audio codecs and all the audio filters that

185
00:09:55,800 --> 00:09:58,840
require the use of FFT and sometimes is better

186
00:09:58,840 --> 00:10:03,080
than the external FFT libraries that everyone is using.

187
00:10:03,080 --> 00:10:05,920
New API for record and structure frame

188
00:10:05,920 --> 00:10:09,360
for encoders, API breakage for deprecation.

189
00:10:09,360 --> 00:10:11,480
We have, of course, what I hate.

190
00:10:11,480 --> 00:10:13,720
Lots of new YUV format and pixel format,

191
00:10:13,720 --> 00:10:16,040
because there is always a good reason to add them.

192
00:10:16,040 --> 00:10:19,640
And when I'm downstream as VLT, I hate that, but any.

193
00:10:19,640 --> 00:10:25,120
Lots of things on channel layouts and H.274,

194
00:10:25,120 --> 00:10:30,160
mostly about external filters.

195
00:10:30,160 --> 00:10:31,920
One of the big parts on those features

196
00:10:31,920 --> 00:10:33,400
is everything related to hardware.

197
00:10:33,400 --> 00:10:35,760
So I said about everyone hardware recording,

198
00:10:35,760 --> 00:10:39,120
a lot of pixel formats, especially for hardware.

199
00:10:39,120 --> 00:10:40,720
There is finally the Android media

200
00:10:40,720 --> 00:10:45,200
codec using directly NDK, and not with a Java crop that

201
00:10:45,200 --> 00:10:48,440
is directly integrated into FFMPEG.

202
00:10:48,440 --> 00:10:52,080
I think that requires API Android 23,

203
00:10:52,080 --> 00:10:54,000
but I'm not exactly sure.

204
00:10:54,000 --> 00:10:56,520
And we also have the encoding and not just the decoding,

205
00:10:56,520 --> 00:10:59,040
but also based on media codec.

206
00:10:59,040 --> 00:11:01,440
We have the Intel folks have done a lot of things

207
00:11:01,440 --> 00:11:06,920
to have a 10-bit, 12-bit, 42444 VP9 decoding directly

208
00:11:06,920 --> 00:11:07,840
inside FFMPEG.

209
00:11:07,840 --> 00:11:11,040
That's one of the reasons why we have new pixel formats.

210
00:11:11,040 --> 00:11:13,080
In terms of actual features, there

211
00:11:13,080 --> 00:11:17,120
is, of course, lots of new codecs, lots of new filters.

212
00:11:17,120 --> 00:11:19,960
The ones I prefer are the FTR, which

213
00:11:19,960 --> 00:11:24,320
is a annoying company who doesn't want us to reverse engine

214
00:11:24,320 --> 00:11:25,280
is that.

215
00:11:25,280 --> 00:11:30,560
Bonk, APAC, there is a SIM SSIM 360 filter,

216
00:11:30,560 --> 00:11:34,920
and some very cool bitstream filter for the DTS to PTS one.

217
00:11:34,920 --> 00:11:35,560
Look at that one.

218
00:11:35,560 --> 00:11:37,520
It's quite useful.

219
00:11:37,520 --> 00:11:38,280
Yeah.

220
00:11:38,280 --> 00:11:41,440
So FFMPEG CLI multistrading, as I said.

221
00:11:41,440 --> 00:11:43,520
This is partly done in 6.0.

222
00:11:43,520 --> 00:11:47,680
It will be continued on 6.1 and 7.0.

223
00:11:47,680 --> 00:11:51,760
It is difficult, and it's long, but this

224
00:11:51,760 --> 00:11:55,840
is going to improve all your lives, or at least especially

225
00:11:55,840 --> 00:11:59,920
if you want to do a multiple HLS dash, multiple transcode,

226
00:11:59,920 --> 00:12:02,120
multiple resolution, and do that directly,

227
00:12:02,120 --> 00:12:05,800
without using third parties.

228
00:12:05,800 --> 00:12:09,280
FFMPEG releases, this is a slide I took exactly

229
00:12:09,280 --> 00:12:11,000
from a previous talk, and we never

230
00:12:11,000 --> 00:12:14,200
talked about that during first time,

231
00:12:14,200 --> 00:12:15,920
so that's why I'm talking about it.

232
00:12:15,920 --> 00:12:20,800
The problem that was like FFMPEG releases were kind of,

233
00:12:20,800 --> 00:12:22,280
well, before there was not.

234
00:12:22,280 --> 00:12:26,040
So we all took the good show on, and I hope it was great.

235
00:12:26,040 --> 00:12:28,640
And then we were seeing what Mplay was doing,

236
00:12:28,640 --> 00:12:29,600
then VLC was copying.

237
00:12:29,600 --> 00:12:31,640
And well, if Mplay on VLC agreed,

238
00:12:31,640 --> 00:12:32,960
then everyone was using that.

239
00:12:32,960 --> 00:12:35,680
Then we started having releases, and done by Michael,

240
00:12:35,680 --> 00:12:37,960
and sometimes they were not very predictable.

241
00:12:37,960 --> 00:12:42,120
So one of the idea is to start to come to a more predictable

242
00:12:42,120 --> 00:12:46,120
fashion, which is one major API break,

243
00:12:46,120 --> 00:12:50,040
and API break every year around December, January,

244
00:12:50,040 --> 00:12:51,840
so we're in February, and we fuck this year.

245
00:12:51,840 --> 00:12:53,760
But that's the idea.

246
00:12:53,760 --> 00:12:57,240
So one major where we allow API and API breakage.

247
00:12:57,240 --> 00:12:59,440
We remove APIs.

248
00:12:59,440 --> 00:13:02,120
When it's deprecated, it must be there for two years

249
00:13:02,120 --> 00:13:07,600
before we move that, but we will bump the SO numbers.

250
00:13:07,600 --> 00:13:11,040
And then one or two releases during the year,

251
00:13:11,040 --> 00:13:14,440
depending on security and what we need, so 5.0, 5.1.

252
00:13:14,440 --> 00:13:17,240
And every two years, one of the dot one will be LTS,

253
00:13:17,240 --> 00:13:20,440
and we'll continue that for two or three years.

254
00:13:20,440 --> 00:13:22,880
So the plan was to do FFMPEG Cs.0 in January.

255
00:13:22,880 --> 00:13:24,920
I hope it's going to come next week.

256
00:13:24,920 --> 00:13:25,400
We'll see.

257
00:13:28,720 --> 00:13:31,960
Yeah, this was not on schedule, so I'm adding a shorter talk

258
00:13:31,960 --> 00:13:35,040
in the middle of my two talks.

259
00:13:35,040 --> 00:13:38,440
David1.0 was released last year.

260
00:13:38,440 --> 00:13:41,320
It is insane.

261
00:13:41,320 --> 00:13:45,200
200,000 lines of handwritten assembly.

262
00:13:45,200 --> 00:13:48,720
That's like, I don't think there is any open source project

263
00:13:48,720 --> 00:13:49,360
that I've had.

264
00:13:49,360 --> 00:13:51,800
I'm not sure there is even a non-open source project that

265
00:13:51,800 --> 00:13:54,520
has that much assembly.

266
00:13:54,520 --> 00:13:57,040
And yes, handwritten assembly is faster

267
00:13:57,040 --> 00:13:59,640
than using whatever version of whatever compiler

268
00:13:59,640 --> 00:14:02,000
and activating whatever amazing feature that is going

269
00:14:02,000 --> 00:14:04,200
to auto vectorize something.

270
00:14:04,200 --> 00:14:07,800
We still do 5, 8, 16 times faster than C,

271
00:14:07,800 --> 00:14:10,120
so don't bring that up.

272
00:14:10,120 --> 00:14:14,360
It is insane, yet it's necessary.

273
00:14:14,360 --> 00:14:16,160
So when you decode everyone, so everyone

274
00:14:16,160 --> 00:14:21,640
is now in all your iOS devices, all your Android devices,

275
00:14:21,640 --> 00:14:23,880
all your applications that decode everyone.

276
00:14:23,880 --> 00:14:26,240
It's on macOS, it's on Windows, it's of course in Chrome,

277
00:14:26,240 --> 00:14:29,240
it's of course in VLCMPV and all the other things.

278
00:14:29,240 --> 00:14:32,080
So it's literally everywhere.

279
00:14:32,080 --> 00:14:36,160
A lot of work was done in the David 1.0 about frame-threading.

280
00:14:36,160 --> 00:14:39,240
Like there is lots of, please see the talks from Ronaldo

281
00:14:39,240 --> 00:14:40,480
for a few years ago.

282
00:14:40,480 --> 00:14:42,760
Wow, OK, thank you.

283
00:14:42,760 --> 00:14:46,240
About the different spreading models that are inside David,

284
00:14:46,240 --> 00:14:50,640
and David 1.0 has everything in a simpler way.

285
00:14:50,640 --> 00:14:55,600
We are going to, it's extremely fast, very fast.

286
00:14:55,600 --> 00:15:00,320
David 1.0, 1.1 releases is coming soon, soonish.

287
00:15:00,320 --> 00:15:02,560
A lot of fixing, especially because there

288
00:15:02,560 --> 00:15:05,400
were a lot of conformance tests that we were not passing.

289
00:15:05,400 --> 00:15:07,640
And for some reason, they got out.

290
00:15:07,640 --> 00:15:10,000
And there is, of course, lots of new assembly, especially

291
00:15:10,000 --> 00:15:11,360
for AVX 512 and Neon.

292
00:15:14,080 --> 00:15:15,360
Cool.

293
00:15:15,360 --> 00:15:16,920
We're going to speak about, well, I'm

294
00:15:16,920 --> 00:15:22,880
going to do a demo, which is VLC.js, which is actually not

295
00:15:22,880 --> 00:15:24,960
in JS.

296
00:15:24,960 --> 00:15:27,640
So what are we talking about?

297
00:15:27,640 --> 00:15:37,000
Yeah, so this is Chrome.

298
00:15:37,000 --> 00:15:39,880
And this is why I'm on macOS and not my usual Linux

299
00:15:39,880 --> 00:15:41,960
for the people who wonder.

300
00:15:41,960 --> 00:15:45,920
This is VLC and FFMPag and all the dependency

301
00:15:45,920 --> 00:15:47,640
compiled to WebAssembly.

302
00:15:47,640 --> 00:15:50,800
And what you cannot see, but this

303
00:15:50,800 --> 00:15:54,040
is doing hardware decodings through WebCodecs, right?

304
00:15:54,040 --> 00:15:56,080
So what happens here is that what you're seeing

305
00:15:56,080 --> 00:15:59,480
is that it's actually decoded on the hardware through WebCodecs.

306
00:15:59,480 --> 00:16:01,400
And then you take the output frame

307
00:16:01,400 --> 00:16:05,360
directly into WebGL and, well, OpenGL ES2, which

308
00:16:05,360 --> 00:16:08,800
is compiled to WebGL, and display that.

309
00:16:08,800 --> 00:16:12,920
And this is a 4K H264 MP4, blah, blah, blah.

310
00:16:12,920 --> 00:16:14,960
OK, that's boring, JB.

311
00:16:14,960 --> 00:16:17,240
I can do 4K H264 everywhere.

312
00:16:17,240 --> 00:16:19,040
Sure, sure you can.

313
00:16:19,040 --> 00:16:22,840
So let's do something a bit more complex.

314
00:16:22,840 --> 00:16:25,880
So this is the same, probably a Divx.

315
00:16:25,880 --> 00:16:28,080
Except it's MKV.

316
00:16:28,080 --> 00:16:30,040
The MKV part is done in Wasm, right?

317
00:16:30,040 --> 00:16:31,640
It's a normal VLC demuxer.

318
00:16:31,640 --> 00:16:33,480
There is no JavaScript involved, right?

319
00:16:33,480 --> 00:16:37,960
I'm not demuxing MKV and remixing as MP4, like HLDS.js.

320
00:16:37,960 --> 00:16:39,800
It has, of course, chapter support,

321
00:16:39,800 --> 00:16:43,160
because, well, what's the use of that?

322
00:16:43,160 --> 00:16:48,120
But also, if I found my mouse again, no worries.

323
00:16:48,120 --> 00:16:52,640
Yeah, you have also chapter subtitles,

324
00:16:52,640 --> 00:16:54,120
which are not WebVTT, right?

325
00:16:54,120 --> 00:16:56,760
Normal DVB subtitles.

326
00:16:56,760 --> 00:16:58,960
OK, so that's not too amazing, right?

327
00:16:58,960 --> 00:17:00,560
So let's do something more complex.

328
00:17:04,320 --> 00:17:09,080
OK, 4K VP9 in software decoding directly

329
00:17:09,080 --> 00:17:12,480
inside the web browser.

330
00:17:12,480 --> 00:17:14,400
OK, that's pretty much better, right?

331
00:17:14,400 --> 00:17:17,440
WebM on macOS, right?

332
00:17:17,440 --> 00:17:19,480
So, well, yeah, but professional.

333
00:17:19,480 --> 00:17:24,040
They use, like, actual format, like MPEG-TS.

334
00:17:24,040 --> 00:17:25,560
Let's do.

335
00:17:25,560 --> 00:17:28,120
So that's something that is ATSC over the air, right?

336
00:17:28,120 --> 00:17:31,280
So that's HEVC83TS, right?

337
00:17:31,280 --> 00:17:32,960
All the stack that is not in the web browser.

338
00:17:32,960 --> 00:17:37,040
It's decoded and displayed directly into your web browser.

339
00:17:37,040 --> 00:17:40,160
And that's where you realize that the US TV is really dumb.

340
00:17:43,040 --> 00:17:48,640
OK, but, OK, so that was hardware accelerated or not,

341
00:17:48,640 --> 00:17:50,800
because that's why it's HEVC.

342
00:17:50,800 --> 00:17:52,320
As you can guess, right?

343
00:17:52,320 --> 00:17:56,000
I can either force web codec or AV codec.

344
00:17:56,000 --> 00:17:59,000
So now I'm going to force software decoding.

345
00:17:59,000 --> 00:18:01,320
And I'm going to show you something a bit more complex,

346
00:18:01,320 --> 00:18:07,160
which is this is Korean TV, which is interlaced.

347
00:18:07,160 --> 00:18:10,680
And the interlacing is happening as a WebGL shader

348
00:18:10,680 --> 00:18:12,080
directly inside your web browser, right?

349
00:18:12,080 --> 00:18:15,320
So we're decoding 8264 interlaced.

350
00:18:15,320 --> 00:18:16,880
Of course, we cannot do that by hardware,

351
00:18:16,880 --> 00:18:20,280
because, of course, API doesn't support interlaced codec.

352
00:18:20,280 --> 00:18:24,840
So we decode full in software, and then we display directly

353
00:18:24,840 --> 00:18:27,800
and do sharpening and the interlacing

354
00:18:27,800 --> 00:18:32,840
of those very old multicast formats without any change.

355
00:18:32,840 --> 00:18:34,720
OK, and I guess I got no.

356
00:18:34,720 --> 00:18:36,080
Yeah, I got one minute more.

357
00:18:36,080 --> 00:18:39,880
So this is DNECHD.

358
00:18:39,880 --> 00:18:43,320
Of course, the output is not 420, but it's 420, 422.

359
00:18:43,320 --> 00:18:47,400
And that's actually interlaced and decoded as MXF directly.

360
00:18:47,400 --> 00:18:50,000
All those professional formats, you play that directly

361
00:18:50,000 --> 00:18:51,440
inside the web browser.

362
00:18:51,440 --> 00:18:56,640
So of course, if we can do 422 and down sampling for 420

363
00:18:56,640 --> 00:19:03,600
in software, well, on the GPU, I can also do 444.

364
00:19:03,600 --> 00:19:07,960
So this is YUV444, 10-bit, right?

365
00:19:07,960 --> 00:19:09,440
Of course, BBB, right?

366
00:19:09,440 --> 00:19:11,560
But things that are absolutely not

367
00:19:11,560 --> 00:19:15,320
possible with any type of APIs.

368
00:19:15,320 --> 00:19:19,080
I probably also can show you that we can do other filters.

369
00:19:19,080 --> 00:19:25,760
And this is a 360 movie that we have with the support on VLC.

370
00:19:25,760 --> 00:19:30,680
And of course, all the mapping from Tetidal to Equial Drunk

371
00:19:30,680 --> 00:19:33,760
Duo is done on the GPU.

372
00:19:33,760 --> 00:19:36,000
Of course, that means that everything

373
00:19:36,000 --> 00:19:40,520
that we do with LiPlasibo in theory should get in.

374
00:19:40,520 --> 00:19:43,000
And I'm out of time.

375
00:19:43,000 --> 00:19:44,000
Thank you.

376
00:19:44,000 --> 00:19:54,000
Thank you.

377
00:19:54,000 --> 00:19:56,680
Do we have any questions from the room?

378
00:19:56,680 --> 00:19:59,480
So an eight question.

379
00:19:59,480 --> 00:20:03,480
So you said you have 200,000 lines of specialized code.

380
00:20:03,480 --> 00:20:09,120
So perhaps there is no slowdown when you flip or rotate

381
00:20:09,120 --> 00:20:12,480
the image or do such transforms.

382
00:20:12,480 --> 00:20:14,520
Because you have a specialized version for that.

383
00:20:14,520 --> 00:20:15,520
Is it so?

384
00:20:15,520 --> 00:20:17,240
You mean on David?

385
00:20:17,240 --> 00:20:18,240
Or here?

386
00:20:18,240 --> 00:20:18,720
Oh, sorry.

387
00:20:18,720 --> 00:20:20,480
I cannot differentiate.

388
00:20:20,480 --> 00:20:23,800
So on David, it's really the decoding part, right?

389
00:20:23,800 --> 00:20:25,640
David is 200,000 lines of assembly

390
00:20:25,640 --> 00:20:26,840
just to do the decoding.

391
00:20:26,840 --> 00:20:29,120
It's around 35,000 lines per architecture.

392
00:20:29,120 --> 00:20:30,520
And we do lots of architectures.

393
00:20:30,520 --> 00:20:33,360
And then they give you a decoding surface.

394
00:20:33,360 --> 00:20:37,080
And then we use it in VLC, in PV, in FFMPag, and we do things.

395
00:20:37,080 --> 00:20:38,920
And here, we would compile it directly

396
00:20:38,920 --> 00:20:41,120
inside WebAssembly, run that in the web browser.

397
00:20:41,120 --> 00:20:45,280
And all the transformations are done then on WebGL.

398
00:20:45,280 --> 00:20:46,600
So that doesn't change anything.

399
00:20:46,600 --> 00:20:51,920
Just to know whether there is a slowdown of any amount

400
00:20:51,920 --> 00:20:55,240
just because of those common transforms, you say?

401
00:20:55,240 --> 00:20:58,320
No, that shouldn't be.

402
00:20:58,320 --> 00:21:00,600
On the dark question?

403
00:21:00,600 --> 00:21:04,600
Can you compile assembly to WebAssembly assembly?

404
00:21:04,600 --> 00:21:07,080
Like, could you compile David in the WebAssembly?

405
00:21:07,080 --> 00:21:12,160
Are you hungry for WebAssembly?

406
00:21:12,160 --> 00:21:14,680
So one of the things that we tried with Lynn, again,

407
00:21:14,680 --> 00:21:18,240
was what we call an assembly transpiler,

408
00:21:18,240 --> 00:21:21,400
where you take actually the ARM handwritten assembly

409
00:21:21,400 --> 00:21:25,440
and try to transpire that to webassembly.scmd, right?

410
00:21:25,440 --> 00:21:27,480
So that you could use neon and do exactly

411
00:21:27,480 --> 00:21:30,480
the opposite of what the web browser are actually doing,

412
00:21:30,480 --> 00:21:35,560
where they take the wasm assembly

413
00:21:35,560 --> 00:21:39,600
and compile that just in time for neon and so on.

414
00:21:39,600 --> 00:21:43,440
It's a very insane project that I had the idea a few years ago.

415
00:21:43,440 --> 00:21:45,360
It's really not sure whether we are going

416
00:21:45,360 --> 00:21:48,760
to be able to do that because you're transpiling assembly.

417
00:21:48,760 --> 00:21:50,960
Like, what the fuck are you talking about?

418
00:21:50,960 --> 00:21:53,240
But yes, I think that's the right solution instead

419
00:21:53,240 --> 00:21:55,920
of rewriting, again, all the assembly from FFMPag

420
00:21:55,920 --> 00:21:57,680
and David again.

421
00:21:57,680 --> 00:22:01,240
If you have time, please come and help us.

422
00:22:01,240 --> 00:22:03,200
I might actually find also some money for that,

423
00:22:03,200 --> 00:22:05,680
if people care.

424
00:22:05,680 --> 00:22:08,760
Another question?

425
00:22:08,760 --> 00:22:09,720
Please ask questions.

426
00:22:09,720 --> 00:22:12,680
I don't eat people.

427
00:22:12,680 --> 00:22:13,040
Yes?

428
00:22:13,040 --> 00:22:16,360
Last time I checked, compiling straight into web assembly,

429
00:22:16,360 --> 00:22:19,240
everything that was thread, posix, everything

430
00:22:19,240 --> 00:22:21,080
was pretty not yet finalized.

431
00:22:21,080 --> 00:22:23,160
Like, what is the process for compiling?

432
00:22:23,160 --> 00:22:24,680
It works fine.

433
00:22:24,680 --> 00:22:28,520
But that's also why you see that I'm on macOS, right?

434
00:22:28,520 --> 00:22:30,760
And I'm on Chrome and not displaying my usual Firefox

435
00:22:30,760 --> 00:22:32,760
and Linux because in order to have threads,

436
00:22:32,760 --> 00:22:36,800
you need to have what we call shared array objects, which

437
00:22:36,800 --> 00:22:39,280
is basically common things.

438
00:22:39,280 --> 00:22:42,280
And because in the web world, what they call web work,

439
00:22:42,280 --> 00:22:44,000
it's usually serialization and deserialization

440
00:22:44,000 --> 00:22:45,000
to move data.

441
00:22:45,000 --> 00:22:50,360
Now this is almost done, works everywhere, mostly on Chrome.

442
00:22:50,360 --> 00:22:51,840
Now it works on Safari.

443
00:22:51,840 --> 00:22:54,840
It works on Firefox, but it's buggy.

444
00:22:54,840 --> 00:22:56,600
And also one of the things that is annoying

445
00:22:56,600 --> 00:22:57,880
is the off-screen canvas because you

446
00:22:57,880 --> 00:23:00,240
want to be able to read directly in the back buffer

447
00:23:00,240 --> 00:23:01,120
before displaying it.

448
00:23:01,120 --> 00:23:03,200
That doesn't work anywhere correctly.

449
00:23:03,200 --> 00:23:04,880
And finally, the hardware decoder only

450
00:23:04,880 --> 00:23:07,960
works in web in Chrome for now.

451
00:23:07,960 --> 00:23:11,320
But maybe Firefox will do something, won't it?

452
00:23:11,320 --> 00:23:12,960
Sorry, what's the concept of the payload

453
00:23:12,960 --> 00:23:16,920
that the pages to download to get that?

454
00:23:16,920 --> 00:23:20,000
25 megawatts?

455
00:23:20,000 --> 00:23:21,960
So the idea is that we're going to, like,

456
00:23:21,960 --> 00:23:24,240
VLC is a module approach.

457
00:23:24,240 --> 00:23:28,160
So there is a very small core and 400, 500, 600 now,

458
00:23:28,160 --> 00:23:29,520
maybe, modules.

459
00:23:29,520 --> 00:23:34,000
And so what I want is to actually be able to load.

460
00:23:34,000 --> 00:23:36,120
And that's almost working, in theory,

461
00:23:36,120 --> 00:23:37,400
so you can load a shadow object.

462
00:23:37,400 --> 00:23:40,120
So you would only stream the core,

463
00:23:40,120 --> 00:23:43,920
and then the core will know which one to go and download.

464
00:23:43,920 --> 00:23:44,920
Yes, Steve?

465
00:23:44,920 --> 00:23:50,640
You mentioned that there were big patches for FNPEG

466
00:23:50,640 --> 00:23:53,600
to organize the code.

467
00:23:53,600 --> 00:23:58,400
It's easier to read emails, so when you flip them.

468
00:23:58,400 --> 00:23:59,680
I'm not answering that question.

469
00:23:59,680 --> 00:24:01,840
Thank you.

470
00:24:01,840 --> 00:24:04,720
So the question was, when is FNPEG community

471
00:24:04,720 --> 00:24:09,040
moving to a sane thing, which is GitLab?

472
00:24:09,040 --> 00:24:10,080
Not my short, right?

473
00:24:10,080 --> 00:24:11,800
Like, you know my opinion, right?

474
00:24:11,800 --> 00:24:16,680
Videolan, VLC, all the iOS, Android ports, X264, and so on.

475
00:24:16,680 --> 00:24:18,960
Even David is on GitLab, and we like it.

476
00:24:18,960 --> 00:24:21,600
The FNPEG community prefers to stay on email.

477
00:24:21,600 --> 00:24:24,240
So I think it's a mistake because we are

478
00:24:24,240 --> 00:24:27,200
losing too many patches because it's very difficult to,

479
00:24:27,200 --> 00:24:29,800
like, but that's a community opinion,

480
00:24:29,800 --> 00:24:32,480
and the community is a majority.

481
00:24:32,480 --> 00:24:33,680
Last question.

482
00:24:33,680 --> 00:24:37,000
So if you're rendering in OpenGL or in the VLCJS,

483
00:24:37,000 --> 00:24:38,840
you're bypassing the media engine, right?

484
00:24:38,840 --> 00:24:41,440
So how do you do the audio-video synchronization?

485
00:24:41,440 --> 00:24:43,160
Well, of course we are.

486
00:24:43,160 --> 00:24:45,360
So the answer is, like, how are you

487
00:24:45,360 --> 00:24:46,800
doing audio-video synchronization?

488
00:24:46,800 --> 00:24:48,040
Well, like VLC, right?

489
00:24:48,040 --> 00:24:49,600
Like, the core of VLC.

490
00:24:49,600 --> 00:24:52,040
VLC was done by this guy and other guys

491
00:24:52,040 --> 00:24:54,680
to actually do, like, live TV, right?

492
00:24:54,680 --> 00:24:56,600
So the core of VLC is a clock, and the clock

493
00:24:56,600 --> 00:25:00,000
is basically working on doing, like,

494
00:25:00,000 --> 00:25:01,480
synchronization, audio and video,

495
00:25:01,480 --> 00:25:04,040
and resampling the audio when it's too late, and so on.

496
00:25:04,040 --> 00:25:06,080
So here we are doing exactly that, right?

497
00:25:06,080 --> 00:25:08,360
So we output audio with Web Audio.

498
00:25:08,360 --> 00:25:09,280
Well, no.

499
00:25:09,280 --> 00:25:11,480
A small part of Web Audio called Audio Worklets.

500
00:25:11,480 --> 00:25:13,920
And so we know how much is actually being played back,

501
00:25:13,920 --> 00:25:17,040
and then we control the V out, which is basically the core of VLC

502
00:25:17,040 --> 00:25:19,400
to synchronize audio and video, and we're using that there.

503
00:25:19,400 --> 00:25:22,680
But I'm not using any type of media source extension

504
00:25:22,680 --> 00:25:24,880
or any other open media, blah, blah, blah.

505
00:25:24,880 --> 00:25:28,000
We are really like, it's mostly a video game.

506
00:25:28,000 --> 00:25:55,000
OK.

